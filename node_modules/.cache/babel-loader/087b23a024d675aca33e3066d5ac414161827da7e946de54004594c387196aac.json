{"ast":null,"code":"var _jsxFileName = \"C:\\\\sukhjot\\\\codeing\\\\url shortner\\\\client\\\\src\\\\components\\\\Navbar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { MDBContainer, MDBNavbar, MDBNavbarBrand, MDBNavbarToggler, MDBIcon, MDBNavbarNav, MDBNavbarItem, MDBNavbarLink, MDBCollapse } from 'mdb-react-ui-kit';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const dispatch = useDispatch();\n  const [openBasic, setOpenBasic] = useState(false);\n  const [user, setUser] = useState({\n    userName: '',\n    token: ''\n  });\n  useEffect(() => {\n    // Read values from local storage\n    const storedUserName = localStorage.getItem('userName') || '';\n    const storedToken = localStorage.getItem('token') || '';\n\n    // Set the state with the values from local storage\n    setUser({\n      userName: storedUserName,\n      token: storedToken\n    });\n\n    // Dispatch action to set user in the Redux store\n    dispatch({\n      type: 'setUser',\n      payload: {\n        userName: storedUserName,\n        token: storedToken\n      }\n    });\n  }, [dispatch]);\n  const logoutUser = () => {\n    // Clear local storage\n    window.localStorage.removeItem('userName');\n    window.localStorage.removeItem('token');\n\n    // Dispatch action to reset user in the Redux store\n    dispatch({\n      type: 'setUser',\n      payload: {\n        userName: '',\n        token: ''\n      }\n    });\n\n    // Update state to reflect the logout\n    setUser({\n      userName: '',\n      token: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(MDBNavbar, {\n    expand: \"lg\",\n    light: true,\n    bgColor: \"light\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mWSRH3FVD27tGZHKu4sUg5BBazI=\", false, function () {\n  return [useDispatch];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","MDBContainer","MDBNavbar","MDBNavbarBrand","MDBNavbarToggler","MDBIcon","MDBNavbarNav","MDBNavbarItem","MDBNavbarLink","MDBCollapse","useDispatch","jsxDEV","_jsxDEV","App","_s","dispatch","openBasic","setOpenBasic","user","setUser","userName","token","storedUserName","localStorage","getItem","storedToken","type","payload","logoutUser","window","removeItem","expand","light","bgColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/sukhjot/codeing/url shortner/client/src/components/Navbar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {\r\n  MDBContainer,\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarToggler,\r\n  MDBIcon,\r\n  MDBNavbarNav,\r\n  MDBNavbarItem,\r\n  MDBNavbarLink,\r\n  MDBCollapse,\r\n} from 'mdb-react-ui-kit';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n  const [openBasic, setOpenBasic] = useState(false);\r\n  const [user, setUser] = useState({\r\n    userName: '',\r\n    token: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Read values from local storage\r\n    const storedUserName = localStorage.getItem('userName') || '';\r\n    const storedToken = localStorage.getItem('token') || '';\r\n\r\n    // Set the state with the values from local storage\r\n    setUser({\r\n      userName: storedUserName,\r\n      token: storedToken,\r\n    });\r\n\r\n    // Dispatch action to set user in the Redux store\r\n    dispatch({\r\n      type: 'setUser',\r\n      payload: {\r\n        userName: storedUserName,\r\n        token: storedToken,\r\n      },\r\n    });\r\n  }, [dispatch]);\r\n\r\n  const logoutUser = () => {\r\n    // Clear local storage\r\n    window.localStorage.removeItem('userName');\r\n    window.localStorage.removeItem('token');\r\n\r\n    // Dispatch action to reset user in the Redux store\r\n    dispatch({\r\n      type: 'setUser',\r\n      payload: {\r\n        userName: '',\r\n        token: '',\r\n      },\r\n    });\r\n\r\n    // Update state to reflect the logout\r\n    setUser({\r\n      userName: '',\r\n      token: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <MDBNavbar expand='lg' light bgColor='light'>\r\n      {/* ... rest of the component remains unchanged ... */}\r\n    </MDBNavbar>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SACEC,YAAY,EACZC,SAAS,EACTC,cAAc,EACdC,gBAAgB,EAChBC,OAAO,EACPC,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,WAAW,QACN,kBAAkB;AACzB,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC;IAC/BqB,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFvB,SAAS,CAAC,MAAM;IACd;IACA,MAAMwB,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE;IAC7D,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;;IAEvD;IACAL,OAAO,CAAC;MACNC,QAAQ,EAAEE,cAAc;MACxBD,KAAK,EAAEI;IACT,CAAC,CAAC;;IAEF;IACAV,QAAQ,CAAC;MACPW,IAAI,EAAE,SAAS;MACfC,OAAO,EAAE;QACPP,QAAQ,EAAEE,cAAc;QACxBD,KAAK,EAAEI;MACT;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,QAAQ,CAAC,CAAC;EAEd,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACvB;IACAC,MAAM,CAACN,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC;IAC1CD,MAAM,CAACN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;;IAEvC;IACAf,QAAQ,CAAC;MACPW,IAAI,EAAE,SAAS;MACfC,OAAO,EAAE;QACPP,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE;MACT;IACF,CAAC,CAAC;;IAEF;IACAF,OAAO,CAAC;MACNC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC;EAED,oBACET,OAAA,CAACV,SAAS;IAAC6B,MAAM,EAAC,IAAI;IAACC,KAAK;IAACC,OAAO,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEjC,CAAC;AAEhB;AAACvB,EAAA,CAvDuBD,GAAG;EAAA,QACRH,WAAW;AAAA;AAAA4B,EAAA,GADNzB,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}